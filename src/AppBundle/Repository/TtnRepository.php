<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Ttn;
use AppBundle\Entity\User;
use Doctrine\ORM\Query;
use GuzzleHttp\Client;

/**
 * TtnRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TtnRepository extends \Doctrine\ORM\EntityRepository
{
    public function addTtn($Data, $User)
    {
        $em = $this->getEntityManager();
        
        $Ttn = new Ttn();
        
        $Ttn->setTtnNumber($Data->Number);
        $Ttn->setCityRecipient($Data->CityRecipient);
        $Ttn->setCitySender($Data->CitySender);
        $Ttn->setScheduledDeliveryDate(new \DateTime($Data->ScheduledDeliveryDate));
        $Ttn->setDateCreated(new \DateTime($Data->DateCreated));
        $Ttn->setPayerType($Data->PayerType);
        $Ttn->setPaymentMethod($Data->PaymentMethod);
        $Ttn->setRecipientNumber($Data->WarehouseRecipientNumber);
        $Ttn->setStatus($Data->Status);
        $Ttn->setStatusCode($Data->StatusCode);
        $Ttn->setWarehouseRecipient($Data->WarehouseRecipient);
        
        
        $Ttn->setUser($User);
        $User->addTtn($Ttn);
        
        $em->persist($Ttn);
        $em->persist($User);
        $em->flush();
        return $this->findTtnAll($User);
    }
    
    public function findTtn($Data)
    {
        $em = $this->getEntityManager();
        
        $query = $em->createQuery('SELECT t FROM AppBundle:Ttn t WHERE t.ttn_number = :num');
        $query->setParameter('num', $Data);
        $query->setMaxResults(1);
        $result = $query->getResult(Query::HYDRATE_ARRAY);
        if($result){            
            return $result[0];
        }
        return $result;
    }
    
    public function findTtnAll(User $User)
    {
        $em = $this->getEntityManager();  
        $this->upTtn($User);
        $query = $em->createQuery("SELECT t FROM AppBundle:Ttn t WHERE t.user_id = :id AND t.date_add > DATE_ADD(CURRENT_DATE(),(-1), 'month') ORDER BY t.id DESC");
        $query->setParameter('id', $User->getId());
        
        return $query->getResult(Query::HYDRATE_ARRAY);
    }
    
    public function ttnClear()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $q = $qb->delete('AppBundle:Ttn', 't')
                ->where("t.date_add <= DATE_ADD(CURRENT_DATE(),(-2), 'month')")
                ->getQuery();
        return 'ttn removed rows: '. $q->execute();
    }
    
    public function upTtn($User)
    {
        $em = $this->getEntityManager(); 
        $query = $em->createQuery("SELECT t.ttn_number as DocumentNumber FROM AppBundle:Ttn t WHERE t.user_id = :id "
                . "AND t.status_code NOT IN (2, 3, 9, 10, 11, 106) AND t.date_add > DATE_ADD(CURRENT_DATE(),(-1), 'month')");
        $query->setParameter('id', $User->getId());
        $res = $query->getResult(Query::HYDRATE_ARRAY);
        $data_ttn = $this->sendGetStatus($res);
        
        foreach ($data_ttn as $d_ttn)
        {
           $Ttn = $em->getRepository(Ttn::class)->findOneBy(['ttn_number' => $d_ttn->Number]);
           
            if($Ttn && $Ttn->getStatusCode() !=  $d_ttn->StatusCode){
                $Ttn->setStatusCode($d_ttn->StatusCode);
                $Ttn->setStatus($d_ttn->Status);
            }
            $Ttn->setDateUp();  
            $em->persist($Ttn);
        }
        $em->flush();
        
        return true;
    }
    
    public function isCanged($data_ttn)
    {
        $em = $this->getEntityManager(); 
        $api_ttn = []; $action = false;
        $front_ttn = [];
        foreach ($data_ttn as $ttn){
            $api_ttn[] = [
                'DocumentNumber' => $ttn['ttn_number']
            ];
            
            $front_ttn[$ttn['ttn_number']] = $ttn;
        }
       
        $res = $this->sendGetStatus($api_ttn);

        foreach ($res as $val)
        {
            $ttn =  NULL;
            if(isset($front_ttn[$val->Number])){
                $ttn = $front_ttn[$val->Number];
            }
            
            if($ttn && $ttn['status_code'] !=  $val->StatusCode)
            {
                $Ttn = $em->getRepository(Ttn::class)->findOneBy(['ttn_number' => $val->Number]);           
                $Ttn->setStatusCode($val->StatusCode);
                $Ttn->setStatus($val->Status);
                $em->persist($Ttn);
                $front_ttn[$val->Number]['status_code'] = $val->StatusCode;
                $front_ttn[$val->Number]['status'] = $val->Status;
                $action = true;
            }
        }
        
        if($action) { $em->flush(); return $front_ttn;}
        return $action;
    }
    
    public function sendGetStatus($data_ttn)
    {   
        $Client = new Client();
        $Prop = [];
        
        $Prop['Documents'] = $data_ttn;

        $Body = [
                'modelName'         => 'TrackingDocument',
                'calledMethod'      =>'getStatusDocuments',
                'methodProperties'  => $Prop
            ];
        
        $res = $Client->post('https://api.novaposhta.ua/v2.0/json/', ['json' => $Body]);
        return json_decode($res->getBody()->getContents())->data;
    }
    
    public function getTtnUsers()
    {
        $em = $this->getEntityManager(); 
        $query = $em->createQuery("SELECT t.id, t.ttn_number, t.status, t.date_up, t.city_sender, t.city_recipient, t.warehouse_recipient, u.email FROM AppBundle:Ttn t JOIN t.user u WHERE "
               . "t.status_code NOT IN (2, 3, 9, 10, 11, 106) AND t.date_up < DATE_ADD(CURRENT_DATE(),(-2), 'day') ORDER BY u.email");
        $query->setMaxResults(100);
        return $query->getResult(Query::HYDRATE_ARRAY);
    }
    
    public function upDateTtn($id)
    {
        $em = $this->getEntityManager(); 
        $Ttn = $em->find(Ttn::class, $id);
        $Ttn->setDateUp();
        $em->persist($Ttn);
        $em->flush();
    }
}
